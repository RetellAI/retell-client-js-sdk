import{EventEmitter as t}from"eventemitter3";import{Room as e,RoomEvent as i,Track as a,RemoteAudioTrack as n,createAudioAnalyser as o}from"livekit-client";const s=new TextDecoder;class r extends t{constructor(){super(),this.room=void 0,this.connected=!1,this.isAgentTalking=!1,this.analyzerComponent=void 0,this.captureAudioFrame=void 0}async startCall(t){try{this.room=new e({audioCaptureDefaults:{autoGainControl:!0,echoCancellation:!0,noiseSuppression:!0,channelCount:1,deviceId:t.captureDeviceId,sampleRate:t.sampleRate},audioOutput:{deviceId:t.playbackDeviceId}}),this.handleRoomEvents(),this.handleAudioEvents(t),this.handleDataEvents(),await this.room.connect("wss://retell-ai-4ihahnq7.livekit.cloud",t.accessToken),console.log("connected to room",this.room.name),this.room.localParticipant.setMicrophoneEnabled(!0),this.connected=!0,this.emit("call_started")}catch(t){this.emit("error","Error starting call"),console.error("Error starting call",t),this.stopCall()}}async startAudioPlayback(){await this.room.startAudio()}stopCall(){var t;this.connected&&(this.connected=!1,this.emit("call_ended"),null==(t=this.room)||t.disconnect()),this.isAgentTalking=!1,delete this.room,this.analyzerComponent&&(this.analyzerComponent.cleanup(),delete this.analyzerComponent),this.captureAudioFrame&&(window.cancelAnimationFrame(this.captureAudioFrame),delete this.captureAudioFrame)}mute(){this.connected&&this.room.localParticipant.setMicrophoneEnabled(!1)}unmute(){this.connected&&this.room.localParticipant.setMicrophoneEnabled(!0)}captureAudioSamples(){if(!this.connected||!this.analyzerComponent)return;let t=new Float32Array(this.analyzerComponent.analyser.fftSize);this.analyzerComponent.analyser.getFloatTimeDomainData(t),this.emit("audio",t),this.captureAudioFrame=window.requestAnimationFrame(()=>this.captureAudioSamples())}handleRoomEvents(){this.room.on(i.ParticipantDisconnected,t=>{"server"===(null==t?void 0:t.identity)&&this.stopCall()}),this.room.on(i.Disconnected,()=>{this.connected&&this.stopCall()})}handleAudioEvents(t){this.room.on(i.TrackSubscribed,(e,i,s)=>{e.kind===a.Kind.Audio&&("agent_audio"===i.trackName&&e instanceof n&&t.emitRawAudioSamples&&(this.analyzerComponent=o(e),this.captureAudioFrame=window.requestAnimationFrame(()=>this.captureAudioSamples())),e.attach())})}handleDataEvents(){this.room.on(i.DataReceived,(t,e,i,a)=>{try{if("server"!==(null==e?void 0:e.identity))return;let i=s.decode(t),a=JSON.parse(i);"update"===a.event_type?this.emit("update",a):"metadata"===a.event_type?this.emit("metadata",a):"agent_start_talking"===a.event_type?(this.isAgentTalking=!0,this.emit("agent_start_talking")):"agent_stop_talking"===a.event_type&&(this.isAgentTalking=!1,this.emit("agent_stop_talking"))}catch(t){console.error("Error decoding data received",t)}})}}export{r as RetellWebClient};
