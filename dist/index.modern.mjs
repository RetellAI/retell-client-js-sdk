import{RetellClient as t,AudioWsClient as e,convertFloat32ToUint8 as i,convertUint8ToFloat32 as s}from"retell-sdk";import{AudioWebsocketProtocol as n,AudioEncoding as o}from"retell-sdk/models/components/calldetail";class a{constructor(e){this.retell=void 0,this.liveClient=null,this.audioContext=null,this.isCalling=!1,this.stream=null,this.captureNode=null,this.audioData=[],this.audioDataIndex=0,this.eventListeners={onConversationStarted:[],onConversationEnded:[],onError:[]},this.retell=new t({apiKey:e})}async startConversation({agentId:t,sampleRate:i=22050,audioEncoding:s=o.S16le,customStream:a=null}){try{await this.setupAudio(i,a);const o=await this.retell.registerCall({agentId:t,audioWebsocketProtocol:n.Web,audioEncoding:s,sampleRate:i});if(!o||!o.callDetail)throw new Error("Register call failed");this.liveClient=new e(o.callDetail.callId),this.handleAudioEvents(),this.isCalling=!0,this.audioContext.resume(),this.triggerEvent("onConversationStarted")}catch(t){this.triggerEvent("onError",t.message)}}stopConversation(){var t,e,i;this.isCalling=!1,null==(t=this.liveClient)||t.close(),null==(e=this.audioContext)||e.suspend(),this.captureNode&&(this.captureNode.disconnect(),this.captureNode.onaudioprocess=null),this.audioContext&&this.audioContext.close(),null==(i=this.stream)||i.getTracks().forEach(t=>t.stop()),this.liveClient=null,this.audioContext=null,this.stream=null,this.captureNode=null,this.audioData=[],this.audioDataIndex=0,this.triggerEvent("onConversationEnded")}on(t,e){this.eventListeners[t]&&this.eventListeners[t].push(e)}async setupAudio(t,e=null){this.audioContext=new AudioContext({sampleRate:t});try{this.stream=e||await navigator.mediaDevices.getUserMedia({audio:{sampleRate:t,echoCancellation:!0,noiseSuppression:!0,channelCount:1}})}catch(t){throw new Error("User didn't give microphone permission")}const s=this.audioContext.createMediaStreamSource(this.stream);this.captureNode=this.audioContext.createScriptProcessor(2048,1,1),this.captureNode.onaudioprocess=t=>{if(this.isCalling){const e=t.inputBuffer.getChannelData(0),s=i(e);this.liveClient.send(s);const n=t.outputBuffer.getChannelData(0);for(let t=0;t<n.length;++t)this.audioData.length>0?(n[t]=this.audioData[0][this.audioDataIndex++],this.audioDataIndex===this.audioData[0].length&&(this.audioData.shift(),this.audioDataIndex=0)):n[t]=0}},s.connect(this.captureNode),this.captureNode.connect(this.audioContext.destination)}handleAudioEvents(){this.liveClient.on("audio",t=>{const e=s(t);this.audioData.push(e)}),this.liveClient.on("error",t=>{this.triggerEvent("onError",t),this.stopConversation()}),this.liveClient.on("close",(t,e)=>{this.stopConversation(),this.triggerEvent("onConversationEnded",{code:t,reason:e})})}triggerEvent(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(t=>t(e))}}export{a as RetellClientSdk};
