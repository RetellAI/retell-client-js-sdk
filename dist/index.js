var t=require("eventemitter3");function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=/*#__PURE__*/e(require("isomorphic-ws"));function o(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,i(t,e)}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}var a=/*#__PURE__*/function(t){function e(e){var o;(o=t.call(this)||this).ws=void 0,o.pingTimeout=null,o.wasDisconnected=!1;var i=(e.customEndpoint||"wss://api.retellai.com/audio-websocket/")+e.callId;return e.enableUpdate&&(i+="?enable_update=true"),o.ws=new n.default(i),o.ws.binaryType="arraybuffer",o.ws.onopen=function(){o.emit("open"),o.resetPingTimeout()},o.ws.onmessage=function(t){if("string"==typeof t.data)if("ping"===t.data)o.wasDisconnected&&(o.emit("reconnect"),o.wasDisconnected=!1),o.emit("ping"),o.resetPingTimeout();else if("clear"===t.data)o.emit("clear");else try{var e=JSON.parse(t.data);o.emit("update",e)}catch(t){o.emit("error","Error parsing JSON update from server."),o.ws.close(1e3,"Error parsing JSON update from server.")}else if(t.data instanceof ArrayBuffer){var n=new Uint8Array(t.data);o.emit("audio",n)}else o.emit("error","Got unknown message from server."),o.ws.close(1002,"Got unknown message from server.")},o.ws.onclose=function(t){o.emit("close",t.code,t.reason)},o.ws.onerror=function(t){o.emit("error",t.error)},o}o(e,t);var i=e.prototype;return i.resetPingTimeout=function(){var t=this;this.pingTimeout&&clearTimeout(this.pingTimeout),this.pingTimeout=setTimeout(function(){t.wasDisconnected=!0},5500)},i.send=function(t){1===this.ws.readyState&&this.ws.send(t)},i.close=function(){this.ws.close()},e}(t.EventEmitter);function r(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}exports.RetellWebClient=/*#__PURE__*/function(t){function e(e){var n;return(n=t.call(this)||this).liveClient=void 0,n.audioContext=void 0,n.isCalling=!1,n.stream=void 0,n.audioNode=void 0,n.customEndpoint=void 0,n.captureNode=null,n.audioData=[],n.audioDataIndex=0,e&&(n.customEndpoint=e),n}o(e,t);var n=e.prototype;return n.startConversation=function(t){try{var e=this,n=r(function(){return Promise.resolve(e.setupAudioPlayback(t.sampleRate,t.customStream)).then(function(){e.liveClient=new a({callId:t.callId,enableUpdate:t.enableUpdate,customEndpoint:e.customEndpoint}),e.handleAudioEvents(),e.isCalling=!0})},function(t){e.emit("error",t.message)});return Promise.resolve(n&&n.then?n.then(function(){}):void 0)}catch(t){return Promise.reject(t)}},n.stopConversation=function(){var t,e,n,o,i;this.isCalling=!1,null==(t=this.liveClient)||t.close(),null==(e=this.audioContext)||e.suspend(),null==(n=this.audioContext)||n.close(),this.isAudioWorkletSupported()?(null==(i=this.audioNode)||i.disconnect(),this.audioNode=null):this.captureNode&&(this.captureNode.disconnect(),this.captureNode.onaudioprocess=null,this.captureNode=null,this.audioData=[],this.audioDataIndex=0),this.liveClient=null,null==(o=this.stream)||o.getTracks().forEach(function(t){return t.stop()}),this.audioContext=null,this.stream=null},n.handleAudioEvents=function(){var t=this;this.liveClient.on("open",function(){t.emit("conversationStarted")}),this.liveClient.on("audio",function(e){t.playAudio(e),t.emit("audio",e)}),this.liveClient.on("disconnect",function(){t.emit("disconnect")}),this.liveClient.on("reconnect",function(){t.emit("reconnect")}),this.liveClient.on("error",function(e){t.emit("error",e),t.isCalling&&t.stopConversation()}),this.liveClient.on("close",function(e,n){t.isCalling&&t.stopConversation(),t.emit("conversationEnded",{code:e,reason:n})}),this.liveClient.on("update",function(e){t.emit("update",e)}),this.liveClient.on("clear",function(){t.isAudioWorkletSupported()?t.audioNode.port.postMessage("clear"):(t.audioData=[],t.audioDataIndex=0)})},n.setupAudioPlayback=function(t,e){try{var n=this;return Promise.resolve(function(){if(n.isAudioWorkletSupported()){var o=function(t){console.log("Audio worklet starting"),n.audioContext.resume();var e=new Blob(['\nclass captureAndPlaybackProcessor extends AudioWorkletProcessor {\n    audioData = [];\n    index = 0;\n  \n    constructor() {\n      super();\n      //set listener to receive audio data, data is float32 array.\n      this.port.onmessage = (e) => {\n        if (e.data === "clear") {\n          // Clear all buffer.\n          this.audioData = [];\n          this.index = 0;\n        } else if (e.data.length > 0) {\n          this.audioData.push(this.convertUint8ToFloat32(e.data));\n        }\n      };\n    }\n  \n    convertUint8ToFloat32(array) {\n      const targetArray = new Float32Array(array.byteLength / 2);\n    \n      // A DataView is used to read our 16-bit little-endian samples out of the Uint8Array buffer\n      const sourceDataView = new DataView(array.buffer);\n    \n      // Loop through, get values, and divide by 32,768\n      for (let i = 0; i < targetArray.length; i++) {\n        targetArray[i] = sourceDataView.getInt16(i * 2, true) / Math.pow(2, 16 - 1);\n      }\n      return targetArray;\n    }\n  \n    convertFloat32ToUint8(array) {\n      const buffer = new ArrayBuffer(array.length * 2);\n      const view = new DataView(buffer);\n    \n      for (let i = 0; i < array.length; i++) {\n        const value = array[i] * 32768;\n        view.setInt16(i * 2, value, true); // true for little-endian\n      }\n    \n      return new Uint8Array(buffer);\n    }\n  \n    process(inputs, outputs, parameters) {\n      // Capture\n      const input = inputs[0];\n      const inputChannel1 = input[0];\n      const inputChannel2 = input[1];\n      this.port.postMessage(this.convertFloat32ToUint8(inputChannel1));\n  \n      // Playback\n      const output = outputs[0];\n      const outputChannel1 = output[0];\n      const outputChannel2 = output[1];\n      // start playback.\n      for (let i = 0; i < outputChannel1.length; ++i) {\n        if (this.audioData.length > 0) {\n          outputChannel1[i] = this.audioData[0][this.index];\n          outputChannel2[i] = this.audioData[0][this.index];\n          this.index++;\n          if (this.index == this.audioData[0].length) {\n            this.audioData.shift();\n            this.index = 0;\n          }\n        } else {\n          outputChannel1[i] = 0;\n          outputChannel2[i] = 0;\n        }\n      }\n  \n      return true;\n    }\n  }\n  \n  registerProcessor(\n    "capture-and-playback-processor",\n    captureAndPlaybackProcessor,\n  );\n'],{type:"application/javascript"}),o=URL.createObjectURL(e);return Promise.resolve(n.audioContext.audioWorklet.addModule(o)).then(function(){console.log("Audio worklet loaded"),n.audioNode=new AudioWorkletNode(n.audioContext,"capture-and-playback-processor"),console.log("Audio worklet setup"),n.audioNode.port.onmessage=function(t){null!=n.liveClient&&n.liveClient.send(t.data)},n.audioContext.createMediaStreamSource(n.stream).connect(n.audioNode),n.audioNode.connect(n.audioContext.destination)})};n.audioContext=new AudioContext({sampleRate:t});var i=r(function(){function o(t){n.stream=t}return e?o(e):Promise.resolve(navigator.mediaDevices.getUserMedia({audio:{sampleRate:t,echoCancellation:!0,noiseSuppression:!0,channelCount:1}})).then(o)},function(){throw new Error("User didn't give microphone permission")});return i&&i.then?i.then(o):o()}var a=function(t){var e=n.audioContext.createMediaStreamSource(n.stream);n.captureNode=n.audioContext.createScriptProcessor(2048,1,1),n.captureNode.onaudioprocess=function(t){if(n.isCalling){var e=function(t){for(var e=new ArrayBuffer(2*t.length),n=new DataView(e),o=0;o<t.length;o++)n.setInt16(2*o,32768*t[o],!0);return new Uint8Array(e)}(t.inputBuffer.getChannelData(0));n.liveClient.send(e);for(var o=t.outputBuffer.getChannelData(0),i=0;i<o.length;++i)n.audioData.length>0?(o[i]=n.audioData[0][n.audioDataIndex++],n.audioDataIndex===n.audioData[0].length&&(n.audioData.shift(),n.audioDataIndex=0)):o[i]=0}},e.connect(n.captureNode),n.captureNode.connect(n.audioContext.destination)};n.audioContext=new AudioContext({sampleRate:t});var s=r(function(){function o(t){n.stream=t}return e?o(e):Promise.resolve(navigator.mediaDevices.getUserMedia({audio:{sampleRate:t,echoCancellation:!0,noiseSuppression:!0,channelCount:1}})).then(o)},function(){throw new Error("User didn't give microphone permission")});return s&&s.then?s.then(a):a()}())}catch(t){return Promise.reject(t)}},n.isAudioWorkletSupported=function(){return/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)},n.playAudio=function(t){if(this.isAudioWorkletSupported())this.audioNode.port.postMessage(t);else{var e=function(t){for(var e=new Float32Array(t.byteLength/2),n=new DataView(t.buffer),o=0;o<e.length;o++)e[o]=n.getInt16(2*o,!0)/Math.pow(2,15);return e}(t);this.audioData.push(e)}},e}(t.EventEmitter);
